/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authorizedRouteRouteImport } from './routes/(authorized)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiMeRouteImport } from './routes/api/me'
import { Route as authPagesSignupRouteImport } from './routes/(auth-pages)/signup'
import { Route as authPagesLoginRouteImport } from './routes/(auth-pages)/login'
import { Route as authorizedNotificationsIndexRouteImport } from './routes/(authorized)/notifications.index'
import { Route as authorizedNetworkIndexRouteImport } from './routes/(authorized)/network.index'
import { Route as authorizedMessagingIndexRouteImport } from './routes/(authorized)/messaging.index'
import { Route as authorizedJobsIndexRouteImport } from './routes/(authorized)/jobs.index'
import { Route as authorizedFeedIndexRouteImport } from './routes/(authorized)/feed.index'
import { Route as authorizedAccountIndexRouteImport } from './routes/(authorized)/account.index'
import { Route as authorizedProfileUserIdRouteImport } from './routes/(authorized)/profile.$userId'

const authorizedRouteRoute = authorizedRouteRouteImport.update({
  id: '/(authorized)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMeRoute = ApiMeRouteImport.update({
  id: '/api/me',
  path: '/api/me',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesSignupRoute = authPagesSignupRouteImport.update({
  id: '/(auth-pages)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: '/(auth-pages)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authorizedNotificationsIndexRoute =
  authorizedNotificationsIndexRouteImport.update({
    id: '/notifications/',
    path: '/notifications/',
    getParentRoute: () => authorizedRouteRoute,
  } as any)
const authorizedNetworkIndexRoute = authorizedNetworkIndexRouteImport.update({
  id: '/network/',
  path: '/network/',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedMessagingIndexRoute =
  authorizedMessagingIndexRouteImport.update({
    id: '/messaging/',
    path: '/messaging/',
    getParentRoute: () => authorizedRouteRoute,
  } as any)
const authorizedJobsIndexRoute = authorizedJobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedFeedIndexRoute = authorizedFeedIndexRouteImport.update({
  id: '/feed/',
  path: '/feed/',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedAccountIndexRoute = authorizedAccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => authorizedRouteRoute,
} as any)
const authorizedProfileUserIdRoute = authorizedProfileUserIdRouteImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => authorizedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authorizedRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/api/me': typeof ApiMeRoute
  '/profile/$userId': typeof authorizedProfileUserIdRoute
  '/account': typeof authorizedAccountIndexRoute
  '/feed': typeof authorizedFeedIndexRoute
  '/jobs': typeof authorizedJobsIndexRoute
  '/messaging': typeof authorizedMessagingIndexRoute
  '/network': typeof authorizedNetworkIndexRoute
  '/notifications': typeof authorizedNotificationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authorizedRouteRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/api/me': typeof ApiMeRoute
  '/profile/$userId': typeof authorizedProfileUserIdRoute
  '/account': typeof authorizedAccountIndexRoute
  '/feed': typeof authorizedFeedIndexRoute
  '/jobs': typeof authorizedJobsIndexRoute
  '/messaging': typeof authorizedMessagingIndexRoute
  '/network': typeof authorizedNetworkIndexRoute
  '/notifications': typeof authorizedNotificationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(authorized)': typeof authorizedRouteRouteWithChildren
  '/(auth-pages)/login': typeof authPagesLoginRoute
  '/(auth-pages)/signup': typeof authPagesSignupRoute
  '/api/me': typeof ApiMeRoute
  '/(authorized)/profile/$userId': typeof authorizedProfileUserIdRoute
  '/(authorized)/account/': typeof authorizedAccountIndexRoute
  '/(authorized)/feed/': typeof authorizedFeedIndexRoute
  '/(authorized)/jobs/': typeof authorizedJobsIndexRoute
  '/(authorized)/messaging/': typeof authorizedMessagingIndexRoute
  '/(authorized)/network/': typeof authorizedNetworkIndexRoute
  '/(authorized)/notifications/': typeof authorizedNotificationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/api/me'
    | '/profile/$userId'
    | '/account'
    | '/feed'
    | '/jobs'
    | '/messaging'
    | '/network'
    | '/notifications'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/api/me'
    | '/profile/$userId'
    | '/account'
    | '/feed'
    | '/jobs'
    | '/messaging'
    | '/network'
    | '/notifications'
  id:
    | '__root__'
    | '/'
    | '/(authorized)'
    | '/(auth-pages)/login'
    | '/(auth-pages)/signup'
    | '/api/me'
    | '/(authorized)/profile/$userId'
    | '/(authorized)/account/'
    | '/(authorized)/feed/'
    | '/(authorized)/jobs/'
    | '/(authorized)/messaging/'
    | '/(authorized)/network/'
    | '/(authorized)/notifications/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authorizedRouteRoute: typeof authorizedRouteRouteWithChildren
  authPagesLoginRoute: typeof authPagesLoginRoute
  authPagesSignupRoute: typeof authPagesSignupRoute
  ApiMeRoute: typeof ApiMeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authorized)': {
      id: '/(authorized)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authorizedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/me': {
      id: '/api/me'
      path: '/api/me'
      fullPath: '/api/me'
      preLoaderRoute: typeof ApiMeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)/signup': {
      id: '/(auth-pages)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authPagesSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth-pages)/login': {
      id: '/(auth-pages)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authorized)/notifications/': {
      id: '/(authorized)/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof authorizedNotificationsIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/network/': {
      id: '/(authorized)/network/'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof authorizedNetworkIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/messaging/': {
      id: '/(authorized)/messaging/'
      path: '/messaging'
      fullPath: '/messaging'
      preLoaderRoute: typeof authorizedMessagingIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/jobs/': {
      id: '/(authorized)/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof authorizedJobsIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/feed/': {
      id: '/(authorized)/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof authorizedFeedIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/account/': {
      id: '/(authorized)/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof authorizedAccountIndexRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
    '/(authorized)/profile/$userId': {
      id: '/(authorized)/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof authorizedProfileUserIdRouteImport
      parentRoute: typeof authorizedRouteRoute
    }
  }
}

interface authorizedRouteRouteChildren {
  authorizedProfileUserIdRoute: typeof authorizedProfileUserIdRoute
  authorizedAccountIndexRoute: typeof authorizedAccountIndexRoute
  authorizedFeedIndexRoute: typeof authorizedFeedIndexRoute
  authorizedJobsIndexRoute: typeof authorizedJobsIndexRoute
  authorizedMessagingIndexRoute: typeof authorizedMessagingIndexRoute
  authorizedNetworkIndexRoute: typeof authorizedNetworkIndexRoute
  authorizedNotificationsIndexRoute: typeof authorizedNotificationsIndexRoute
}

const authorizedRouteRouteChildren: authorizedRouteRouteChildren = {
  authorizedProfileUserIdRoute: authorizedProfileUserIdRoute,
  authorizedAccountIndexRoute: authorizedAccountIndexRoute,
  authorizedFeedIndexRoute: authorizedFeedIndexRoute,
  authorizedJobsIndexRoute: authorizedJobsIndexRoute,
  authorizedMessagingIndexRoute: authorizedMessagingIndexRoute,
  authorizedNetworkIndexRoute: authorizedNetworkIndexRoute,
  authorizedNotificationsIndexRoute: authorizedNotificationsIndexRoute,
}

const authorizedRouteRouteWithChildren = authorizedRouteRoute._addFileChildren(
  authorizedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authorizedRouteRoute: authorizedRouteRouteWithChildren,
  authPagesLoginRoute: authPagesLoginRoute,
  authPagesSignupRoute: authPagesSignupRoute,
  ApiMeRoute: ApiMeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
